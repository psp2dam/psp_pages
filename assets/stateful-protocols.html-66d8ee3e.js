import{_ as A,a as y}from"./client_sample_state_protocol-61e731a5.js";import{_ as d,r as o,o as u,c as m,d as a,a as s,w as e,b as n,e as t,f as p}from"./app-92b2a0d8.js";const B={},D=s("h1",{id:"_4-4-stateful-protocols",tabindex:"-1"},"4.4 Stateful protocols",-1),E={class:"table-of-contents"},v=s("h2",{id:"_4-4-1-stateful-and-stateless-protocols",tabindex:"-1"},"4.4.1. Stateful and stateless protocols",-1),b=s("p",null,"Como ya hemos comentado anteriormente, un protocolo, aplicado al mundo de las comunicaciones informáticas, es un conjunto de reglas que especifican la manera en la que se realiza la comunicación entre dos interlocutores.",-1),f=s("p",null,[n("Este conjunto de reglas establece el formato de los mensajes que se intercambian "),s("code",null,"(texto, binario, JSON, XML, CSV, ...)"),n(", las acciones que cada uno de los extremos de la comunicación deben realizar en cada momento "),s("code",null,"(envío o recepción)"),n(" y, lo que nos ocupa en este apartado del tema, si las acciones dependen de acciones anteriores o no.")],-1),g=s("h3",{id:"stateless-protocols",tabindex:"-1"},"Stateless protocols",-1),h={href:"https://es.wikipedia.org/wiki/Protocolo_sin_estado",target:"_blank",rel:"noopener noreferrer"},q=p('<p>El ejemplo más conocido de protocolo sin estado es HTTP.1​ El protocolo no proporciona medio alguno de almacenamiento de datos de un usuario entre las peticiones, dejando esta tarea a niveles superiores y haciendo necesario el reenvío de información de manera continua para simular un funcionamiento con estado (cookies, cabeceras, etc.).</p><h3 id="stateful-protocols" tabindex="-1">Stateful protocols</h3><p>Un protocolo sin estado no requiere que el servidor retenga información de la sesión o de estado acerca de los intercambios de información durante la realización de múltiples peticiones. En contraste, un protocolo que requiere el mantenimiento del <strong>estado interno en el servidor</strong> se conoce como un <strong>protocolo con estado</strong>.</p><p>Por lo tanto, un estado es una configuración en un programa o máquina que depende de los estados anteriores y que determina el funcionamiento del sistema, en función de la entrada recibida y del estado actual en el que se encuentre el sistema.</p><p>Poniendo una analogía, podemos tomar una solicitud a la administración, donde debemos realizar varios pasos hasta resolver la solicitud.</p><ol><li>En primer lugar se rellena una instancia con los datos y se envía al departamento correspondiente.</li><li>Ese departamento comprobará la instancia recibida y contestará solicitando información adicional o confirmando que la solicitud se ha recibido correctamente.</li><li>En un proceso posterior, se solicita un pago de tasas al usuario.</li><li>El usuario tiene que realizar el pago de tasas y enviar el justificante.</li><li>Tras cotejar toda la información, se le solicita al usuario que aporte los documentos originales.</li><li>El usuario se persona para mostrar la documentación original</li><li>Finalmente se resuelve la solicitud informando al usuario el resultado de la misma.</li></ol><p>Esto, que puede ser un procedimiento normal, refleja claramente un proceso en el que se siguen una serie de pasos y cuyo orden no se puede cambiar.</p><p>Por ejemplo, no tendría sentido hacer el pago de las tasas (paso 4) sin antes haber presentado la solicitud (paso 1) o sin haber recibido la confirmación de que la solicitud está completa.</p><p>Esto mismo pasa con algunos protocolos de comunicación.</p><h2 id="_4-4-2-programacion-de-servidores-basados-en-estados" tabindex="-1">4.4.2 Programación de servidores basados en estados</h2><p>Hay toda una teoría matemática, <code>la teoría de grafos</code>, desarrollada en torno a esto, junto con un modelo computacional, <code>los autómatas finitos</code>, que estudian y optimizan el desarrollo de aplicaciones basadas en estados.</p><p>La teoría de grafos es una rama de las matemáticas y las ciencias de la computación que estudia las propiedades de los grafos</p><p>La teoría de grafos tiene sus fundamentos en las <code>matemáticas discretas</code> y de las <code>matemáticas aplicadas</code>. Esta teoría requiere de diferentes conceptos de diversas áreas como <strong>combinatoria, álgebra, probabilidad, geometría de polígonos, aritmética y topología</strong>. Actualmente ha tenido mayor influencia en el campo de la informática, las ciencias de la computación y telecomunicaciones. Debido a la gran cantidad de aplicaciones en la optimización de recorridos, procesos, flujos y algoritmos de búsquedas, entre otros</p><p>Un autómata finito o máquina de estado finito es un modelo computacional que toma decisiones de computación de forma automática sobre una entrada para producir una salida.</p><p>Este modelo está conformado por un alfabeto, un conjunto de estados finito, una función de transición, un estado inicial y un conjunto de estados finales.</p><p>La finalidad de los autómatas finitos, entre otras, es la de reconocer lenguajes regulares, que corresponden a los lenguajes formales más simples según la Jerarquía de Chomsky.</p><h3 id="programacion-de-aplicaciones-cliente-y-o-servidor" tabindex="-1">Programación de aplicaciones Cliente y/o Servidor</h3><p>Como en todos los casos que hemos estudiado con anterioridad, el protocolo es la pieza común entre los clientes y los servidores.</p><p>Nuestros clientes podrán estar bien o mal programados, de hecho muchos de nuestros clientes son interactivos, por lo que podemos alterar el orden de los comandos a nuestro antojo, no siendo esto ningún problema.</p><p>Debe ser el servidor el que tenga el control del proceso, el que asegure la integridad del sistema y de los datos, por lo tanto va a ser en la parte del servidor donde tengamos que realizar las modificaciones para adaptarlo al control y gestión de los estados.</p><p>Esto no quita que los clientes deban seguir <code>sincronizados</code> con el servidor para evitar situaciones de interbloqueo, ya que de una forma u otra el cliente siempre debe seguir el protocolo, aunque no los estados tal y como hemos dicho.</p><h2 id="_4-4-3-ejemplo-de-servidor-con-estados" tabindex="-1">4.4.3. Ejemplo de servidor con estados</h2><p>Vamos a ver qué pasos debemos seguir para controlar los estados en el servidor y cómo adaptar un cliente.</p><p>El ejemplo que vamos a utilizar es el de la actividad <code>U4A03_ProtocoloSaludo</code>. Primero vamos a aclarar cómo debe funcionar este protocolo.</p><p>Si el cliente está bien programado, el intercambio de información entre Cliente y Servidor se realiza en tres pasos</p><ol><li>Cliente envía &quot;Hi Server!&quot;</li><li>Servidor responde &quot;Hi Client!&quot;</li><li>Cliente responde &quot;By Server!&quot;</li></ol><p>Ante un funcionamiento normal, este protocolo es bastante fácil de implementar. Sin embargo,</p><ul><li>¿Qué pasa si el cliente envía &quot;By Server!&quot; como primer mensaje?</li><li>¿Qué debe responder el servidor si no recibe el mensaje que está esperando?</li><li>¿Qué debe hacer el cliente si no recibe el mensaje que está esperando?</li></ul><p>Estas son las circunstancias a las que debemos responder con los estados del protocolo, indicando en cada caso qué debe hacer cada una de las partes. Todo dependerá de la funcionalidad que esté implementando el protocolo.</p><p>Cada caso es diferente, por ejemplo, si es importante hacer los tres pasos en orden, ante cualquier fallo se debe volver a empezar (un borrado en una BD, una autenticación de tres vías). Si por el contrario, los dos primeros pasos se tienen que realizar de forma conjunta, pero el tercero es independiente, si el incumplimiento del protocolo se produce en ese momento, no es necesario que se repitan los dos primeros pasos, sino que sólo será necesario repetir el último.</p><p><img src="'+A+'" alt="Diagrama de estados U4A03_ProtocoloSaludo"></p>',31),S=p(`<h3 id="ejemplo-del-worker-que-implementa-el-protocolo" tabindex="-1">Ejemplo del Worker que implementa el protocolo</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">U4A03_SaludoWorker</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> messages </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Client!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Bye Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error. Unknown or unexpected command</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">enum</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Estados</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        HI</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> BYE</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">Estados</span><span style="color:#90A4AE;"> estado</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#6182B8;">U4A03_SaludoWorker</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">socketCliente</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">this.</span><span style="color:#90A4AE;">socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Inicializamos el valor del estado al estado inicial</span></span>
<span class="line"><span style="color:#90A4AE;">        estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">HI</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Recibe lo que envía el cliente hasta que el mensaje sea</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// END OF TRANSMISSION</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">estado </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la solicitud del cliente por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> str </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Comprobamos si se ha cerrado el extremo cliente del socket</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Y damos por concluida la comunicación.</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str </span><span style="color:#39ADB5;">==</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                    </span><span style="color:#90A4AE;font-style:italic;">// Mostramos la información recibida por consola</span></span>
<span class="line"><span style="color:#90A4AE;">                    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">CLIENTE &gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Controlamos la respuesta en función del mensaje recibido y </span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// el estado actual</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">switch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">estado</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> HI</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">].</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos respuesta al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">                            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#39ADB5;">                            </span><span style="color:#90A4AE;font-style:italic;">// Cambiamos el estado del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">                            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">BYE</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos error al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">                            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">3</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> BYE</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">2</span><span style="color:#39ADB5;">].</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                            </span><span style="color:#90A4AE;font-style:italic;">// Cambiamos el estado del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">                            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos error al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">                            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">3</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#90A4AE;">                            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">HI</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> END</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#39ADB5;">                        </span><span style="color:#90A4AE;font-style:italic;">// No sería necesario contemplarlo en este caso</span></span>
<span class="line"><span style="color:#39ADB5;">                        </span><span style="color:#90A4AE;font-style:italic;">// Pero sí en otros en los que se tenga que enviar </span></span>
<span class="line"><span style="color:#39ADB5;">                        </span><span style="color:#90A4AE;font-style:italic;">// algún mensaje antes de salir.</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error de comunicación con el cliente</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">Exception</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getLocalizedMessage</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">            e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">printStackTrace</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">finally</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Conexión cerrada: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">                socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error inesperado cerrando los recursos</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>El código corresponde al worker de un servidor multihilo. Analicemos ahora el código por partes</p><p>Es recomendable usar propiedades para guardar los mensajes que queramos comparar y tener un ENuM para definir los estados. Los <code>enum</code> en Java permiten ser usados en los bloques switch-case.</p><p>La propiedad <strong>estado</strong> va a ser el punto central que controle el flujo de ejecución del servidor.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> messages </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Client!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Bye Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error. Unknown or unexpected command</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">enum</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Estados</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        HI</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> BYE</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">Estados</span><span style="color:#90A4AE;"> estado</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div></div></div><p>En el constructor, además de todas las propiedades, inicializamos el estado, asignándole el valor del estado inicial.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#6182B8;">U4A03_SaludoWorker</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">this.</span><span style="color:#90A4AE;">socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Inicializamos el valor del estado al estado inicial</span></span>
<span class="line"><span style="color:#90A4AE;">    estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">HI</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div></div><p>El servidor estará ejecutándose hasta que se alcance el estado final</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Recibe lo que envía el cliente hasta que el mensaje sea</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// END OF TRANSMISSION</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">estado </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span></code></pre></div><p>En este ejemplo, el intercambio de información con el cliente se hace uno a uno, es decir se recibe un mensaje y se envía una respuesta, pero no tiene porqué ser así, se pueden recibir varios mensajes y no enviar respuesta, o cualquier combinación de envío respuesta que nos imaginemos.</p><p>El código que sigue e un control para saber si el cliente ha cerrado el socket, así evitamos tener excepciones de tipo NullPointerException o dejar al servidor en un bucle infinito. Forzamos la salida cambiando el estado del protocolo.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Comprobamos si se ha cerrado el extremo cliente del socket</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// Y damos por concluida la comunicación.</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str </span><span style="color:#39ADB5;">==</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Mostramos la información recibida por consola</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">CLIENTE &gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br></div></div><p>Este es el código que implementa el diagrama de estados que he diseñado para esta actividad. Fijaos que el servidor tiene que realizar una comprobación para cada línea que sale de un estado. En este caso al ser sólo dos líneas, sirve con un if-else, pero puede ser un número mayor de opciones.</p><p>Además, una de las opciones tiene un comportamiento totalmente diferente al resto, ya que <strong>cuando se recibe el mensaje final, el protocolo no dice que enviemos una respuesta al cliente</strong>.</p><p>Esto <code>debemos controlarlo en el cliente</code>, porque si lo programamos de forma que envíe un mensaje y espere una respuesta, puede quedarse bloqueado en la lectura. Aprovechando que este es el último mensaje, más adelante veremos cómo se ha solventado en el cliente.y las opciones que tenemos para evitar posibles bloqueos como este.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Controlamos la respuesta en función del mensaje recibido y </span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// el estado actual</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">switch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">estado</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> HI</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">].</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos respuesta al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Cambiamos el estado del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">BYE</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos error al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">3</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> BYE</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">2</span><span style="color:#39ADB5;">].</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Cambiamos el estado del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">END</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Enviamos error al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">3</span><span style="color:#39ADB5;">]);</span></span>
<span class="line"><span style="color:#90A4AE;">            estado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Estados</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">HI</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">case</span><span style="color:#90A4AE;"> END</span><span style="color:#39ADB5;font-style:italic;">:</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// No sería necesario contemplarlo en este caso</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Pero sí en otros en los que se tenga que enviar </span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// algún mensaje antes de salir.</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div><h2 id="_4-4-4-ejemplo-de-cliente-con-estados" tabindex="-1">4.4.4. Ejemplo de cliente con estados</h2><p>Aunque un cliente interactivo como los que usamos para las pruebas no deberían cambiar su funcionalidad, sí hay que hacer pequeños ajustes para adaptar su funcionamiento a las posibles respuestas y errores que envía el servidor.</p><p><img src="`+y+'" alt="Diagrama de estados U4A03_ProtocoloSaludo"></p>',20),j=p(`<p>Como ya hemos dicho en el código del servidor, si implementamos el protocolo como un cliente de envío-respuesta, hay un caso en el que no debemos esperar una respuesta. Este es el caso de la salida, en la que se envía un mensaje pero no esperamos respuesta por parte del servidor.</p><p>Se puede pensar en poner una condición de salida para cuando el cliente envía el último mensaje, pero no podemos asegurar que ese mensaje cerrará la comunicación, porque dependerá del estado en el que se encuentre el servidor.</p><h3 id="ejemplo-de-cliente-generico-que-implementa-el-protocolo" tabindex="-1">Ejemplo de cliente &quot;genérico&quot; que implementa el protocolo</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">U4A03_SaludoClient</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> messages </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Hi Client!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Bye Server!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error. Unknown or unexpected command</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Creamos un socket en el lado cliente, enlazado con un</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// servidor que está en la misma máquina que el cliente</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// y que escucha en el puerto 4444</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Socket</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">args</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">],</span><span style="color:#90A4AE;"> Integer</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">parseInt</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">args</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">]));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">err</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede establecer canales de E/S para la conexión</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Scanner</span><span style="color:#90A4AE;"> stdIn </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Scanner</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">in</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// El programa cliente no analiza los mensajes enviados por el</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// usuario, simplemente los reenvía al servidor hasta que se envía </span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// el mensaje final del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">do</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Leo la entrada del usuario</span></span>
<span class="line"><span style="color:#90A4AE;">            linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">nextLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// La envia al servidor por el OutputStream</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Recibe la respuesta del servidor por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">            linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">==</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Comprobamos si se ha cerrado el extremo servidor del socket</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Y damos por concluida la comunicación.</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Envía a la salida estándar la respuesta del servidor</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">SERVIDOR &gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Libera recursos</span></span>
<span class="line"><span style="color:#90A4AE;">        salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>El código corresponde a un cliente interactivo genérico, que va enviando mensajes y esperando la respuesta de los mismos sin hacer ningún tipo de control sobre lo que se envía o lo que recibe.</p><p>Analicemos algunos aspectos del código del cliente</p><p>La parte que sigue es equivalente a la que hemos usado en el servidor. No modificamos el flujo envío-recepción, pero sí que comprobamos si el lado del servidor ha cerrado el socket (ha realizado todo el protocolo correctamente) para decidir que el cliente finalice su ejecución.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Recibe la respuesta del servidor por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">==</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Comprobamos si se ha cerrado el extremo servidor del socket</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Y damos por concluida la comunicación.</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Envía a la salida estándar la respuesta del servidor</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">SERVIDOR &gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">} </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div></div><div class="custom-container warning"><p class="custom-container-title">Lectura con timeout</p><p>Otra manera distinta de hacer lo mismo es usando lecturas con timeout.</p><p>En este ejemplo podríamos haber comprobado si el mensaje enviado es el mensaje de finalización. Es ese caso, si todo ha ido bien, no deberíamos esperar una respuesta por parte del server, pero si ha habido algún error, sí debemos realizar una lectura del socket.</p><p>Usando este código</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// El programa cliente no analiza los mensajes enviados por el</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// usuario, simplemente los reenvía al servidor hasta que se envía </span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// el mensaje final del protocolo</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">do</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Leo la entrada del usuario</span></span>
<span class="line"><span style="color:#90A4AE;">            linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">nextLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// La envia al servidor por el OutputStream</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Si enviamos el mensaje de salida, no hacemos una lectura indefinida</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">messages</span><span style="color:#39ADB5;">[</span><span style="color:#F76D47;">2</span><span style="color:#39ADB5;">]))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setSoTimeout</span><span style="color:#39ADB5;">(</span><span style="color:#F76D47;">100</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setSoTimeout</span><span style="color:#39ADB5;">(</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la respuesta del servidor por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Envía a la salida estándar la respuesta del servidor</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">SERVIDOR &gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">SocketTimeoutException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">ste</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Pasado el timeout no se ha recibido una respuesta</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Podemos suponer que el server no envía respuesta</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Eso indica que el protocolo se ha completado</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Damos por concluida la comunicación.</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">            </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fijamos un tiempo de espera pasado el cual se producirá una <code>SocketTimeoutException</code> indicando que no se ha leído nada del socket. Si por el contrario se lee información del socket, esta se muestra por la consola.</p><p>En este caso en concreto, esta solución no funciona porque el servidor ya ha cerrado el socket. Esto sería útil cuando tengamos que hacer una <code>lectura opcional</code> en mitad de un protocolo, y serviría tanto para un cliente como para un servidor.</p></div>`,9);function C(k,_){const r=o("DownloadPDF-component"),c=o("DocumentCover-component"),l=o("router-link"),i=o("ExternalLinkIcon");return u(),m("div",null,[a(r),a(c,{titulo:"4.4 Stateful protocols"}),D,s("nav",E,[s("ul",null,[s("li",null,[a(l,{to:"#_4-4-1-stateful-and-stateless-protocols"},{default:e(()=>[n("4.4.1. Stateful and stateless protocols")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#stateless-protocols"},{default:e(()=>[n("Stateless protocols")]),_:1})]),s("li",null,[a(l,{to:"#stateful-protocols"},{default:e(()=>[n("Stateful protocols")]),_:1})])])]),s("li",null,[a(l,{to:"#_4-4-2-programacion-de-servidores-basados-en-estados"},{default:e(()=>[n("4.4.2 Programación de servidores basados en estados")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#programacion-de-aplicaciones-cliente-y-o-servidor"},{default:e(()=>[n("Programación de aplicaciones Cliente y/o Servidor")]),_:1})])])]),s("li",null,[a(l,{to:"#_4-4-3-ejemplo-de-servidor-con-estados"},{default:e(()=>[n("4.4.3. Ejemplo de servidor con estados")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#ejemplo-del-worker-que-implementa-el-protocolo"},{default:e(()=>[n("Ejemplo del Worker que implementa el protocolo")]),_:1})])])]),s("li",null,[a(l,{to:"#_4-4-4-ejemplo-de-cliente-con-estados"},{default:e(()=>[n("4.4.4. Ejemplo de cliente con estados")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#ejemplo-de-cliente-generico-que-implementa-el-protocolo"},{default:e(()=>[n('Ejemplo de cliente "genérico" que implementa el protocolo')]),_:1})])])])])]),v,b,f,g,s("p",null,[n("En informática, un protocolo sin estado es un protocolo de comunicaciones que trata cada petición como una transacción independiente que no tiene relación con cualquier solicitud anterior, de modo que la comunicación se compone de pares independientes de solicitud y respuesta. "),s("a",h,[n("Wikipedia: Protocolo sin estado"),a(i)])]),q,t(` 
stateDiagram-v2
    direction LR
    Hi: Estado Hi\\nEsperando al saludo
    Bye: Estado Bye\\nEsperando la despedida
    [*] -> Hi
    Hi -> Hi : Mensaje incorrecto\\nSe envía error al cliente
    Hi -> Bye : Se ha recibido el mensaje correcto\\nSe envía respuesta al cliente
    note left of Hi : Permanecemos en este estado\\nhasta que se reciba el mensaje correcto
    Bye -> Hi : Mensaje incorrecto\\nSe envía error al cliente
    Bye -> [*] : Se ha recibido el mensaje correcto\\nSe cierra la conexión con el cliente
`),S,t(` 
stateDiagram-v2
    direction LR
    Hi: Envío mensaje
    Bye: Recibo mensaje
    [*] -> Hi
    Hi -> Bye : Se envía un mensaje\\nSe espera la respuesta del servidor
    Bye -> Hi : Se muestra la respuesta del servidor
    note left of Hi : Se envían mensajes\\nmientras el servidor mantenga\\nla conexión abierta   
    Hi -> [*] : Se ha detectado el cierre\\nde la conexión con el servidor
`),j])}const I=d(B,[["render",C],["__file","stateful-protocols.html.vue"]]);export{I as default};
