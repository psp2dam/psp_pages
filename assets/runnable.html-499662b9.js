import{_ as y,r as o,o as d,c as u,d as a,a as s,w as e,b as n,f as t}from"./app-f513d7ce.js";const h={},m=s("h1",{id:"_3-1-java-classes-for-threads",tabindex:"-1"},"3.1. Java classes for threads",-1),D={class:"table-of-contents"},B=s("h2",{id:"_3-1-1-runnable-interface",tabindex:"-1"},"3.1.1. Runnable Interface",-1),E=s("p",null,"A Java Thread can execute your Java code inside your Java application.",-1),v=s("p",null,"When a Java application is started its main() method is executed by the main thread - a special thread that is created by the Java VM to run your application. From inside your application you can create and start more threads which can execute parts of your application code in parallel with the main thread.",-1),b=s("p",null,"Java threads are objects like any other Java objects. Threads are instances of class java.lang.Thread, or instances of subclasses of this class. In addition to being objects, java threads can also execute code.",-1),g=s("p",null,[n("The first way to specify what code a thread should run is by creating a class that implements the "),s("code",null,"java.lang.Runnable"),n(" interface.")],-1),f=s("p",null,"The Runnable interface is a standard Java Interface that comes with the Java platform. The Runnable interface only has a single method run().",-1),T={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Runnable.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>Whatever the thread is supposed to do when it executes must be included in the implementation of the run() method. There are three ways to implement the Runnable interface:</p><ul><li>Create a Java class that implements the Runnable interface.</li><li>Create an anonymous class that implements the Runnable interface.</li><li>Create a Java Lambda that implements the Runnable interface.</li></ul><p>All three options are explained in the following sections.</p><h3 id="java-class-implements-runnable" tabindex="-1">Java Class Implements Runnable</h3><p>The first way to implement the Java Runnable interface is by creating your own Java class that implements the Runnable interface. Here is an example of a custom Java class that implements the Runnable interface:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">MyRunnable</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">implements</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Runnable</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">      System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">MyRunnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All this Runnable implementation does is to print out the text MyRunnable running. After printing that text, the run() method exits, and the thread running the run() method will stop.</p><h3 id="anonymous-implementation-of-runnable" tabindex="-1">Anonymous Implementation of Runnable</h3><p>You can also create an anonymous implementation of Runnable. Here is an example of an anonymous Java class that implements the Runnable interface:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> myRunnable </span><span style="color:#39ADB5;">=</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Runnable</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Runnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apart from being an anonymous class, this example is quite similar to the example that used a custom class to implement the Runnable interface.</p><h3 id="java-lambda-implementation-of-runnable" tabindex="-1">Java Lambda Implementation of Runnable</h3><p>The third way to implement the Runnable interface is by creating a Java Lambda implementation of the Runnable interface. This is possible because the Runnable interface only has a single unimplemented method, and is therefore practically (although possibly unintentionally) a functional Java interface.</p><p>Here is an example of a Java lambda expression that implements the Runnable interface:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> runnable </span><span style="color:#39ADB5;">=</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">-&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#90A4AE;"> System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Lambda Runnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calling-the-run-method-on-a-runnable-class" tabindex="-1">Calling the run method on a Runnable class</h3><p>Look at this sample code of Runnable implementation</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">LiftOff</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">implements</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Runnable</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> countDown </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">10</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> taskCount </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> taskCount</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">countDown</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">this.</span><span style="color:#90A4AE;">countDown </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> countDown</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">countDown </span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">#</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;"> (</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> countDown </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">)</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            countDown</span><span style="color:#39ADB5;">--;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">LiftOff (</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">)</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">LiftOff</span><span style="color:#90A4AE;"> launch </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        launch</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Waiting for LiftOff!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy the code above and run it in your IDE. What do you see in the output?</p><div class="custom-container question"><p class="custom-container-title">What&#39;s wrong with previous execution</p><p>Is the &quot;Waiting for LiftOff!&quot; placed in the right place?</p><p>Try to create more instances of LiftOff and run them all?</p><p>Is the application doing something different to a single threaded application? What can you notice from the program output?</p></div><h2 id="_3-1-2-thread-subclass" tabindex="-1">3.1.2 Thread subclass</h2><p>The second way to specify what code a thread is to run, is to create a subclass of <code>java.lang.Thread</code> and override the run() method. The run() method is what is executed by the thread after you call <code>start()</code>.</p>`,22),w={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Thread.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>Here is an example of creating a Java Thread subclass:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">MyThread</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">      System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">MyThread running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To create and start the above thread you can do like this:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">MyThread</span><span style="color:#90A4AE;"> myThread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">MyThread</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">myTread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The start() call will return as soon as the thread is started. <strong>It will not wait until the run() method is done</strong>. The run() method will execute as if executed by a different CPU. When the run() method executes it will print out the text &quot;MyThread running&quot;.</p><p>You can also create an anonymous subclass of Thread like this:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Thread</span><span style="color:#90A4AE;"> thread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Thread</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Thread Running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This example will print out the text &quot;Thread running&quot; once the run() method is executed by the new thread.</p><div class="custom-container question"><p class="custom-container-title">LiftOff example</p><p>Copy the original LiftOff example and now make it extends Thread class.</p><p>Is the &quot;Waiting for LiftOff!&quot; placed in the right place? Is it working as it&#39;s supposed to?</p><p>Try to create more instances of LiftOff and run them all is the application doing something different to a single threaded application? What can you notice from the program output?</p></div><h2 id="_3-1-3-starting-a-thread-from-a-runnable" tabindex="-1">3.1.3 Starting a Thread from a Runnable</h2><p>To have the run() method executed by a thread, pass an instance of a class, anonymous class or lambda expression that implements the Runnable interface to a Thread in its constructor. Here is how that is done:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> runnable </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">MyRunnable</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">// or an anonymous class, or lambda...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">Thread</span><span style="color:#90A4AE;"> thread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Thread</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">runnable</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the thread is started it will call the run() method of the MyRunnable instance (see previous examples) instead of executing it&#39;s own run() method. The above example would print out the text &quot;MyRunnable running&quot;.</p><div class="custom-container info"><p class="custom-container-title">TIP</p><p>Hence, there are two ways to specify what code the thread should execute.</p><ul><li>The first is to create a subclass of Thread and override the run() method.</li><li>The second method is to pass an object that implements Runnable to the Thread constructor.</li></ul></div>`,14),R=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki material-theme-lighter",style:{"background-color":"#FAFAFA"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"class"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#E2931D"}},"EjemploThread"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"extends"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#E2931D"}},"Thread"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"void"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"run"),s("span",{style:{color:"#39ADB5"}},"()"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#39ADB5"}},"    "),s("span",{style:{color:"#90A4AE","font-style":"italic"}},"// Código del hilo")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#39ADB5"}},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"static"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"void"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"main"),s("span",{style:{color:"#39ADB5"}},"("),s("span",{style:{color:"#9C3EDA"}},"String"),s("span",{style:{color:"#39ADB5"}},"[]"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#90A4AE","font-style":"italic"}},"args"),s("span",{style:{color:"#39ADB5"}},")"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"    "),s("span",{style:{color:"#9C3EDA"}},"EjemploThread"),s("span",{style:{color:"#90A4AE"}}," hilo "),s("span",{style:{color:"#39ADB5"}},"="),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5","font-style":"italic"}},"new"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"EjemploThread"),s("span",{style:{color:"#39ADB5"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"    hilo"),s("span",{style:{color:"#39ADB5"}},"."),s("span",{style:{color:"#6182B8"}},"start"),s("span",{style:{color:"#39ADB5"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#39ADB5"}},"}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#39ADB5"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),q=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki material-theme-lighter",style:{"background-color":"#FAFAFA"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"class"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#E2931D"}},"EjemploRunnable"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"implements"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#E2931D"}},"Runnable"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"void"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"run"),s("span",{style:{color:"#39ADB5"}},"()"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#39ADB5"}},"    "),s("span",{style:{color:"#90A4AE","font-style":"italic"}},"// Código del hilo")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#39ADB5"}},"}")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#9C3EDA"}},"public"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"static"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#9C3EDA"}},"void"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"main"),s("span",{style:{color:"#39ADB5"}},"("),s("span",{style:{color:"#9C3EDA"}},"String"),s("span",{style:{color:"#39ADB5"}},"[]"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#90A4AE","font-style":"italic"}},"args"),s("span",{style:{color:"#39ADB5"}},")"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"    "),s("span",{style:{color:"#9C3EDA"}},"Thread"),s("span",{style:{color:"#90A4AE"}}," hilo "),s("span",{style:{color:"#39ADB5"}},"="),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#39ADB5","font-style":"italic"}},"new"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"Thread"),s("span",{style:{color:"#39ADB5"}},"("),s("span",{style:{color:"#39ADB5","font-style":"italic"}},"new"),s("span",{style:{color:"#90A4AE"}}," "),s("span",{style:{color:"#6182B8"}},"EjemploRunnable"),s("span",{style:{color:"#39ADB5"}},"());")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"    hilo"),s("span",{style:{color:"#39ADB5"}},"."),s("span",{style:{color:"#6182B8"}},"start"),s("span",{style:{color:"#39ADB5"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#90A4AE"}},"  "),s("span",{style:{color:"#39ADB5"}},"}"),s("span",{style:{color:"#90A4AE"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#39ADB5"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_=t(`<h3 id="subclass-or-runnable" tabindex="-1">Subclass or Runnable?</h3><p>There are no rules about which of the two methods is the best. Both methods works. <strong>The preferred method is implementing Runnable</strong>, and handing an instance of the implementation to a Thread instance.</p><p>A few reasons against extending Thread</p><ul><li>When extending the Thread class, we&#39;re not overriding any of its methods. Instead, we override the method of Runnable (which Thread happens to implement). This is a clear violation of IS-A Thread principle.</li><li>Creating an implementation of Runnable and passing it to the Thread class utilizes composition and not inheritance – which is more flexible</li><li>After extending the Thread class, we can&#39;t extend any other class From Java 8 onwards, Runnables can be represented as lambda expressions</li></ul><div class="custom-container danger"><p class="custom-container-title">Common Pitfall: Calling run() Instead of start()</p><p>When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(), like this:</p><blockquote><p>Thread newThread = new Thread(MyRunnable()); newThread.run(); //should be start();</p></blockquote><p>or</p><blockquote><p>MyRunnable runnable = new MyRunnable(); runnable.run();</p></blockquote><p>At first you may not notice anything because the Runnable&#39;s run() method is executed like you expected. However, it is <strong>NOT executed by the new thread</strong> you just created. Instead the run() method is executed by the thread that created the thread. In other words, the thread that executed the above two lines of code. To have the run() method of the MyRunnable instance called by the new created thread, newThread, <strong>you MUST call the newThread.start() method</strong>.</p></div><h2 id="_3-1-4-thread-class-methods" tabindex="-1">3.1.4 Thread class methods</h2><p>If we take a look at the Thread class definition, we will find many methods. We must be careful because some of those methods like stop(), suspend(), resume() and destroy() are <code>deprecated</code>.</p><p>Next we can see the most commonly used methods of Thread class:</p><table><thead><tr><th style="text-align:left;">Method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">start()</td><td style="text-align:left;">Makes a thread execute the code in the run method()</td></tr><tr><td style="text-align:left;">boolean isAlive()</td><td style="text-align:left;">Checks if the thread is alive or not</td></tr><tr><td style="text-align:left;">sleep(long ms)</td><td style="text-align:left;">Changes the thread state to blocked for the ms specified</td></tr><tr><td style="text-align:left;">run()</td><td style="text-align:left;">Is the thread code to be run. It is called by the start method. It represents the lifecycle of a thread.</td></tr><tr><td style="text-align:left;">String toString()</td><td style="text-align:left;">Returns a readable representation a thread [threadName, priority, threadGroupName]</td></tr><tr><td style="text-align:left;">long getId()</td><td style="text-align:left;">Returns the thread id</td></tr><tr><td style="text-align:left;">void yield()</td><td style="text-align:left;">Makes the thread stop running at the moment going back to the queue and allowing other threads to be executed.</td></tr><tr><td style="text-align:left;">void join()</td><td style="text-align:left;">Called from another thread, waits for this thread to die</td></tr><tr><td style="text-align:left;">String getName()</td><td style="text-align:left;">Gets the thread name</td></tr><tr><td style="text-align:left;">String setName(String name)</td><td style="text-align:left;">Sets a name for the thread</td></tr><tr><td style="text-align:left;">int getPriority()</td><td style="text-align:left;">Gets the thread priority</td></tr><tr><td style="text-align:left;">setPriority(int p)</td><td style="text-align:left;">Sets the thread priority</td></tr><tr><td style="text-align:left;">void interrupt()</td><td style="text-align:left;">Interrupts the thread executions causing a InterruptedException</td></tr><tr><td style="text-align:left;">boolean interrupted()</td><td style="text-align:left;">Checks if a thread has been interrupted</td></tr><tr><td style="text-align:left;">Thread.currentThread()</td><td style="text-align:left;">STATIC method returns a reference to the thread that is running this code</td></tr><tr><td style="text-align:left;">boolean isDaemon()</td><td style="text-align:left;">Checks if thread is a daemon. A low-level process running independently from its process. A process can finish while a daemon thread is still running</td></tr><tr><td style="text-align:left;">setDaemon(boolean on)</td><td style="text-align:left;">Makes a thread turn into a daemon. By default all threads are user-threads when they are created.</td></tr><tr><td style="text-align:left;">int activeCount()</td><td style="text-align:left;">Returns the number of active threads in the thread group where the thread belongs to.</td></tr><tr><td style="text-align:left;">Thread.State getState()</td><td style="text-align:left;">Returns the thread state, one of NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING or TERMINATED.</td></tr></tbody></table><p>Thread also has up to 9 constructors, most of them getting a Runnable object as parameter along with the thread name and the tread group.</p><table><thead><tr><th style="text-align:left;">Thread constructors</th></tr></thead><tbody><tr><td style="text-align:left;">Thread()</td></tr><tr><td style="text-align:left;">Thread​(Runnable target)</td></tr><tr><td style="text-align:left;">Thread​(String name)</td></tr><tr><td style="text-align:left;">Thread​(Runnable target, String name)</td></tr><tr><td style="text-align:left;">Thread​(ThreadGroup group, Runnable target)</td></tr><tr><td style="text-align:left;">Thread​(ThreadGroup group, String name)</td></tr><tr><td style="text-align:left;">Thread​(ThreadGroup group, Runnable target, String name)</td></tr><tr><td style="text-align:left;">Thread​(ThreadGroup group, Runnable target, String name, long stackSize)</td></tr><tr><td style="text-align:left;">Thread​(ThreadGroup group, Runnable target, String name, long stackSize, boolean inheritThreadLocals)</td></tr></tbody></table><p>Here we can see an example of some of these methods in use</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">ThreadMethodsExample</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#6182B8;">ThreadMethodsExample</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">ThreadGroup</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">group</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">name</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Call to parent class constructor with group and thread name</span></span>
<span class="line"><span style="color:#90A4AE;">        super</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">group</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> name</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> threadName </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getName</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">[</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">threadName</span><span style="color:#39ADB5;">+</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">] </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Inside the thread</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">[</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">threadName</span><span style="color:#39ADB5;">+</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">] </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Priority: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">          </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getPriority</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">yield</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">[</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">threadName</span><span style="color:#39ADB5;">+</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">] </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Id: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">          </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getId</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">[</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">threadName</span><span style="color:#39ADB5;">+</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">] </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">ThreadGroup: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">          </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getThreadGroup</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getName</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">[</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">threadName</span><span style="color:#39ADB5;">+</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">] </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">ThreadGroup count: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">          </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getThreadGroup</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">activeCount</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// main thread </span></span>
<span class="line"><span style="color:#90A4AE;">        Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">setName</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Main</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">getName</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">currentThread</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">toString</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ThreadGroup</span><span style="color:#90A4AE;"> even </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ThreadGroup</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Even threads</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ThreadGroup</span><span style="color:#90A4AE;"> odd </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ThreadGroup</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Odd threads</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Thread</span><span style="color:#90A4AE;"> localThread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">for</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> i</span><span style="color:#39ADB5;">=</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">;</span><span style="color:#90A4AE;"> i</span><span style="color:#39ADB5;">&lt;</span><span style="color:#F76D47;">10</span><span style="color:#39ADB5;">;</span><span style="color:#90A4AE;"> i</span><span style="color:#39ADB5;">++)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            localThread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ThreadMethodsExample</span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">i</span><span style="color:#39ADB5;">%</span><span style="color:#F76D47;">2</span><span style="color:#39ADB5;">==</span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">)</span><span style="color:#39ADB5;font-style:italic;">?</span><span style="color:#90A4AE;">even</span><span style="color:#39ADB5;font-style:italic;">:</span><span style="color:#90A4AE;">odd</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Thread</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">i</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            localThread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setPriority</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">i</span><span style="color:#39ADB5;">+</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            localThread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">              </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            localThread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">join</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">// --&gt; Will wait until last thread ends </span></span>
<span class="line"><span style="color:#39ADB5;">                                </span><span style="color:#90A4AE;font-style:italic;">// like a waitFor() for processes</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">InterruptedException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">ex</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            ex</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">printStackTrace</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">err</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">The main thread was interrupted while waiting for </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">              </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> localThread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">toString</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">to finish</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Main thread ending</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the code above, the static method Thread.currentThread() should be called in order to get the instance of the current thread running each statement, as there are many threads running the same code at the same time.</p><p>In the previous example we have used just one class for the new threads and for the main thread. And that&#39;s not the usual way to run threads. It&#39;s a better practice to split the code in separate classes.</p><p>Also note that the Thread (or Runnable) class can have it&#39;s own constructor to set its local properties or call the superclass constructors.</p><div class="custom-container question"><p class="custom-container-title">Split the code in two classes</p><p>Copy the code from the ThreadMethodsExample and split in in two classes. One containing the thread class and the other just having the main method and the calls to create and launch the processes.</p><p>Next, change the ThreadMethodsExample to implement the Runnable interface and make the appropriate changes in the other class to make it work again.</p></div><p>Pay attention to even if the threads are started in sequence (1, 2, 3 etc.) they may not execute sequentially, meaning thread 1 may not be the first thread to write its name to System.out. This is because the threads are in principle executing in parallel and not sequentially. The JVM and/or operating system determines the order in which the threads are executed. This order does not have to be the same order in which they were started nor each time the are run.</p><h3 id="pause-a-thread" tabindex="-1">Pause a thread</h3><p>A thread can pause itself by calling the static method <strong>Thread.sleep()</strong>. The sleep() takes a number of milliseconds as parameter. The sleep() method will attempt to sleep that number of milliseconds before resuming execution. The Thread sleep() is not 100% precise, but it is pretty good still. Here is an example of pausing a Java thread for 3 seconds (3.000 milliseconds) by calling the Thread sleep() method:</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">sleep</span><span style="color:#39ADB5;">(</span><span style="color:#F76D47;">3000L</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">InterruptedException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">printStackTrace</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre></div><div class="custom-container info"><p class="custom-container-title">Real systems simulation</p><p>This method is going to be used in activities to simulate time lapses and speed up the real systems simulation. For instance, we can set that each <em>real</em> hour is just a second in the simulation, so one day will be reduced to 24 seconds.</p><p>Also it&#39;s interesting when we need to set random time lapses for each thread, in order to get a realistic simulation of events in the real system.</p></div><p>Random numbers within a specific range of type integer, float, double, long, and boolean can be generated in Java.</p><p>There are three methods to generate random numbers in Java.</p><h4 id="method-1-using-random-class" tabindex="-1">Method 1: Using random class</h4><p>We can use the <code>java.util.Random</code> class to generate random numbers, following the steps below:</p><ul><li>Import the class java.util.Random</li><li>Make the instance of the class Random, i.e., Random rand = new Random()</li><li>Invoke one of the following methods of rand object: <ul><li>nextInt(upperbound) generates random numbers in the range 0 to upperbound-1.</li><li>nextFloat() generates a float between 0.0 and 1.0.</li><li>nextDouble() generates a double between 0.0 and 1.0.</li></ul></li></ul><p>if we use the netxInt invocation with the bound parameter, we&#39;ll get numbers within a range</p><blockquote><p>int randomIntWithinARange = random.nextInt(max)</p></blockquote><p>This will give us a number between <em>0 (inclusive)</em> and <em>max</em> (exclusive). The bound parameter must be greater than 0. Otherwise, we&#39;ll get a java.lang.IllegalArgumentException.</p><h4 id="method-2-using-math-random" tabindex="-1">Method 2: Using Math.random</h4><p>For generating random numbers within a range using Math.random(), follow the steps below:</p><ul><li>Declare the minimum value of the range</li><li>Declare the maximum value of the range</li><li>Use the formula Math.random()*(max-min)+min to generate values with the min and the max value inclusive.</li></ul><p>The value returned by Math.random() is in the range 0 to 1 inclusive.</p><p>To generate a random value between 0 and an upper limit (50)</p><blockquote><p>Math.random()*50</p></blockquote><p>To generate a random value between 1 and an upper limit (50)</p><blockquote><p>Math.random()*49+1</p></blockquote><p>To generate a random bounded value, let&#39;s say between 200 and 500</p><blockquote><p>Math.random()*300+200</p></blockquote><h4 id="method-3-use-threadlocalrandom" tabindex="-1">Method 3: Use ThreadLocalRandom</h4><p>The <code>java.util.Random</code> class doesn&#39;t perform well in a multi-threaded environment.</p><p>In a simplified way, the reason for the poor performance of Random in a multi-threaded environment is due to contention – given that multiple threads share the same Random instance.</p><p>To address that limitation, Java introduced the <code>java.util.concurrent.ThreadLocalRandom</code> for generating random numbers in a multi-threaded environment.</p><p>We just need to call <code>ThreadLocalRandom.current()</code> method, and it will return the instance of ThreadLocalRandom for the current thread. We can then generate random values by invoking available instance methods of the class.</p><p>To generate a random int value without any bounds:</p><blockquote><p>int unboundedRandomValue = ThreadLocalRandom.current().nextInt());</p></blockquote><p>To generate a random bounded int value, meaning a value between a given lower and upper limit.</p><blockquote><p>int boundedRandomValue = ThreadLocalRandom.current().nextInt(0, 100);</p></blockquote><p>Please note, 0 is the inclusive lower limit and 100 is the exclusive upper limit.</p><p>We can generate random values for long and double by invoking <code>nextLong()</code> and <code>nextDouble()</code> methods in a similar way as shown in the examples above.</p><h3 id="threads-priority-management" tabindex="-1">Threads priority management</h3><p>In Java, a thread&#39;s priority is an integer in the range 1 to 10. <em>The larger the integer, the higher the priority</em>. The thread scheduler uses this integer from each thread to determine which one should be allowed to execute. The Thread class defines three types of priorities:</p><ul><li>Minimum priority</li><li>Normal priority</li><li>Maximum priority</li></ul><p>The Thread class defines these priority types as constants <code>MIN_PRIORITY</code>, <code>NORM_PRIORITY</code>, and <code>MAX_PRIORITY</code>, with values 1, 5, and 10, respectively. <strong>NORM_PRIORITY is the default priority for a new Thread</strong>.</p><p>Java&#39;s Thread class provides methods for checking the thread’s priority and for modifying it.</p><p>The <code>getPriority()</code> instance method returns the integer that represents its priority.</p><p>The <code>setPriority()</code> instance method takes an integer between 1 and 10 for changing the thread&#39;s priority. If we pass a value outside the 1-10 range, the method will throw an error.</p><p>When we create a Thread, it inherits its default priority. When multiple threads are ready to execute, the JVM selects and executes the Runnable thread that has the highest priority. If this thread stops or becomes not runnable, the lower-priority threads will execute. In case two threads have the same priority, the JVM will execute them in FIFO order.</p><p>There are two scenarios that can cause a different thread to run:</p><ul><li>A thread with higher priority than the current thread becomes runnable</li><li>The current thread exits the runnable state or yields (temporarily pause and allow other threads)</li></ul><p>In general, at any time, the highest priority thread is running. But sometimes, the thread scheduler might choose low-priority threads for execution to avoid starvation.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">U3S3_HiloPrioridad1</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">long</span><span style="color:#90A4AE;"> c </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">boolean</span><span style="color:#90A4AE;"> stopHilo </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">false;</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">long</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">getContador</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">return</span><span style="color:#90A4AE;"> c</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">pararHilo</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    stopHilo </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true;</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(!</span><span style="color:#90A4AE;">stopHilo</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> c</span><span style="color:#39ADB5;">++;</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">U3S3_EjemploHiloPrioridad1</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">[])</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">U3S3_HiloPrioridad1</span><span style="color:#90A4AE;"> h1 </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">U3S3_HiloPrioridad1</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">U3S3_HiloPrioridad1</span><span style="color:#90A4AE;"> h2 </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">U3S3_HiloPrioridad1</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">U3S3_HiloPrioridad1</span><span style="color:#90A4AE;"> h3 </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">U3S3_HiloPrioridad1</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    h1</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setPriority</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Thread</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">NORM_PRIORITY</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    h2</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setPriority</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Thread</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">MAX_PRIORITY</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    h3</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">setPriority</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Thread</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">MIN_PRIORITY</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    h1</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    h2</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    h3</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">      Thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">sleep</span><span style="color:#39ADB5;">(</span><span style="color:#F76D47;">10000</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">InterruptedException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    h1</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">pararHilo</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    h2</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">pararHilo</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    h3</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">pararHilo</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">h2 (Prio. Máx: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">h2</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getContador</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">h1 (Prio. Normal: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">h1</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getContador</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">h3 (Prio. Mínima: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">h3</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getContador</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63);function k(I,j){const c=o("DownloadPDF-component"),i=o("DocumentCover-component"),l=o("router-link"),p=o("ExternalLinkIcon"),r=o("CodeGroupItem"),A=o("CodeGroup");return d(),u("div",null,[a(c),a(i,{titulo:"3.1. Java classes for threads"}),m,s("nav",D,[s("ul",null,[s("li",null,[a(l,{to:"#_3-1-1-runnable-interface"},{default:e(()=>[n("3.1.1. Runnable Interface")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#java-class-implements-runnable"},{default:e(()=>[n("Java Class Implements Runnable")]),_:1})]),s("li",null,[a(l,{to:"#anonymous-implementation-of-runnable"},{default:e(()=>[n("Anonymous Implementation of Runnable")]),_:1})]),s("li",null,[a(l,{to:"#java-lambda-implementation-of-runnable"},{default:e(()=>[n("Java Lambda Implementation of Runnable")]),_:1})]),s("li",null,[a(l,{to:"#calling-the-run-method-on-a-runnable-class"},{default:e(()=>[n("Calling the run method on a Runnable class")]),_:1})])])]),s("li",null,[a(l,{to:"#_3-1-2-thread-subclass"},{default:e(()=>[n("3.1.2 Thread subclass")]),_:1})]),s("li",null,[a(l,{to:"#_3-1-3-starting-a-thread-from-a-runnable"},{default:e(()=>[n("3.1.3 Starting a Thread from a Runnable")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#subclass-or-runnable"},{default:e(()=>[n("Subclass or Runnable?")]),_:1})])])]),s("li",null,[a(l,{to:"#_3-1-4-thread-class-methods"},{default:e(()=>[n("3.1.4 Thread class methods")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#pause-a-thread"},{default:e(()=>[n("Pause a thread")]),_:1})]),s("li",null,[a(l,{to:"#threads-priority-management"},{default:e(()=>[n("Threads priority management")]),_:1})])])])])]),B,E,v,b,g,f,s("blockquote",null,[s("p",null,[s("a",T,[n("java.lang.Runnable specification"),a(p)])])]),x,s("blockquote",null,[s("p",null,[s("a",w,[n("java.lang.Thread specification"),a(p)])])]),C,a(A,null,{default:e(()=>[a(r,{title:"Extends Thread",active:""},{default:e(()=>[R]),_:1}),a(r,{title:"Runnable"},{default:e(()=>[q]),_:1})]),_:1}),_])}const F=y(h,[["render",k],["__file","runnable.html.vue"]]);export{F as default};
