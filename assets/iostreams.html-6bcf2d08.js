import{_ as d,a as A}from"./Java_Stream_Readers_BufferedReaders-a3f2ee86.js";import{_ as u,r as l,o as y,c as m,d as a,a as s,w as o,b as e,e as p,f as r}from"./app-92b2a0d8.js";const v={},B=s("h1",{id:"_2-3-gestion-de-la-e-s-de-un-proceso",tabindex:"-1"},"2.3 Gestión de la E-S de un proceso",-1),b={class:"table-of-contents"},D=r('<h2 id="_2-3-1-redireccion-de-la-e-s-estandar" tabindex="-1">2.3.1 Redirección de la E/S estándar</h2><p>Ya hemos comentado que un subproceso no tiene terminal o consola en el que poder mostrar su información. Toda la E/S por defecto <em>(stdin -&gt; teclado, stdout y stderr -&gt; pantalla)</em> por defecto se redirige al proceso padre. Es el proceso padre el que puede usar estos streams para recoger o enviar información al proceso hijo.</p><div class="custom-container danger"><p class="custom-container-title">Código del proceso hijo</p><p>En ningún momento, cuando estamos programando un proceso, debemos pensar si va a ser lanzado como padre o como hijo.</p><p>Es más, todos los programas que hacemos son lanzados como hijos por el IDE (Netbeans) y eso no hace que cambiemos nuestra forma de programarlos.</p><p>Un proceso que vayamos a lanzar como hijo debería funcionar perfectamente como proceso independiente y puede ser ejecutado directamente sin tener que hacerle ningún tipo de cambio.</p></div><p>Este intercambio de información nos da mucha flexibilidad y proporciona una forma de control y comunicación sobre el proceso hijo.</p><p>En la relación padre-hijo que se crea entre procesos los descriptores también se redirigen desde el hijo hacia el padre, usando 3 tuberías (pipes), una por cada stream de E/S por defecto. Esas tuberías pueden usarse de forma similar a cómo se hace en los sistemas Linux.</p>',5),E=r('<p><img src="'+d+`" alt="alt_text"></p><h3 id="getinputstream" tabindex="-1">getInputStream()</h3><p>No sólo es importante recoger el valor de retorno de un comando, sino que muchas veces nos va a ser de mucha utilidad el poder obtener la información que el proceso genera por la salida estándar o por la salida de error.</p><p>Para esto vamos a utilizar el método <code>public abstract InputStream getInputStream()</code> de la clase <code>Process</code> para leer el stream de salida del proceso, es decir, para leer lo que el comando ejecutado (proceso hijo) ha enviado a la consola.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processOutput </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">())</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">            </span></span>
<span class="line"><span style="color:#90A4AE;">processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;">    </span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+A+`" alt="alt_text"></p><div class="custom-container warning"><p class="custom-container-title">Charsets y encodings</p><p>Desde el inicio de la informática los juegos de caracteres y las codificaciones han supuesto un auténtico quebradero de cabeza para los programadores, especialmente cuando trabajamos con juegos de caracteres no anglosajones. Pues bien, la consola de Windows no iba a ser una excepción.</p><p>La consola de windows, conocida como <em>&quot;DOS prompt&quot;</em> o <em>cmd</em>, es la forma de ejecutar programas y comandos DOS en Windows, por lo tanto esos programas mantienen la codificación de DOS. A Microsoft no le gustan hacer cambios que pierdan la compatibilidad hacia atrás, es decir, que sean compatibles con versiones anteriores, así que cuando hagamos una aplicación que trabaje con la consola debemos tener en cuenta esta circunstancia.</p><p>En Wikipedia comentan que la codificación <strong>CP850</strong> teóricamente ha sido ampliamente reemplazada por <strong>Windows-1252</strong> y posteriormente Unicode, pero aún así <strong>CP850</strong> sigue presente en la consola de comandos.</p><p>Por lo tanto, si queremos mostrar información de la consola en nuestras aplicaciones, debemos trabajar con el charset adecuado, a saber, CP-850.</p><p>Para usar un encoding concreto, la clase InputStreamReader, que pasa de gestionar bytes a caracteres, tiene un constructor que permite especificar el tipo de codificación usado en el stream de bytes que recibimos, así que que debemos usar este constructor cuando trabajemos con aplicaciones de consola.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">CP850</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Además, para usar una codificación universal, podemos forzar que Netbeans, o mejor dicho la máquina virtual que usa Netbeans, utilice <strong>por defecto el charset <code>UTF-8</code></strong>. Para hacerlo, debemos modificar el archivo de configuración de Netbeans <code>C:/Program Files/Netbeans-xx.x/netbeans/etc/netbeans.conf</code>, y modificar la directiva <code>netbeans_default_option</code> añadiendo al final <strong>-J-Dfile.encoding=UTF-8</strong>.</p></blockquote></div><h3 id="geterrorstream" tabindex="-1">getErrorStream()</h3><p>Curiosamente, o no tanto, además de la salida estándar, también podemos obtener la salida de error (stderr) que genera el proceso hijo para procesarla desde el padre.</p><p>Si la salida de error ha sido previamente redirigida usando el método <code>ProcessBuilder.redirectErrorStream(true)</code> entonces la salida de error y la salida estándar llegan juntas con getInputStream() y no es necesario hacer un tratamiento adicional.</p><p>Si por el contrario queremos hacer un tratamiento diferenciado de los dos tipos de salida, podemos usar un esquema similar al usado anteriormente, con la salvedad de que ahora en vez de llamar a <code>getInputStream()</code> lo hacemos con <code>getErrorStream()</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processError </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getErrorStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// En este ejemplo, por ver una forma diferente de recoger la información,</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// en vez de leer todas las líneas que llegan, recogemos la primera línea</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// y suponemos que nos han enviado un entero.    </span></span>
<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> value </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Integer</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">parseInt</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),h={class:"custom-container info"},g=s("p",{class:"custom-container-title"},"Patrón de diseño Decorator o Wrapper",-1),f=s("p",null,"En ambos tipos de streams de entrada (input y error) estamos recogiendo la información de un objeto de tipo BufferedReader. Podríamos usar directamente el InputStream que nos devuelven los métodos de Process, pero tendríamos que encargarnos nosotros de convertir los bytes a caracteres, de leer el stream carácter a carácter y de controlar el flujo al no disponer de un buffer.",-1),q=s("p",null,[e("Todo esto nos lo podemos ahorrar usando clases que gestionan el flujo a un nivel de concreción más alto, usando sin llegar a ser conscientes otro patrón de diseño bastante común, "),s("strong",null,"Patrón de diseño Decorator"),e(" también llamado "),s("strong",null,"wrapper o envoltorio"),e(".")],-1),j=s("blockquote",null,[s("p",null,"Decorator es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales que contienen estas funcionalidades.")],-1),S={href:"https://refactoring.guru/design-patterns/java",target:"_blank",rel:"noopener noreferrer"},_=r(`<p>Vamos a ver un ejemplo completo de uso de todas las funcionalidad anteriores</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#F76D47;">import</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">java</span><span style="color:#39ADB5;">.</span><span style="color:#9C3EDA;">io</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">*</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Ejercicio2</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> comando </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">notepad</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> pbuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">comando</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 1- Procedemos a leer lo que devuelve el proceso hijo</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">InputStream</span><span style="color:#90A4AE;"> is </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 2- Lo convertimos en un InputStreamReader</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// De esta forma podemos leer caracteres en vez de bytes</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// El InputStreamReader nos permite gestionar diferentes codificaciones</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">InputStreamReader</span><span style="color:#90A4AE;"> isr </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">is</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 2- Para mejorar el rendimiento hacemos un wrapper sobre un BufferedReader</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// De esta forma podemos leer enteros, cadenas o incluso líneas.</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> br </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">isr</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// A Continuación leemos todo como una cadena, línea a línea</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> br</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">())</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">Exception</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error en: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">comando</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">printStackTrace</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">finally</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Para finalizar, cerramos los recursos abiertos</span></span>
<span class="line"><span style="color:#90A4AE;">            br</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            isr</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            is</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getoutputstream" tabindex="-1">getOutputStream()</h3><p>No sólo podemos recoger la información que envía el proceso hijo sino que, además, también podemos enviar información desde el proceso padre al proceso hijo, usando el último de los tres streams que nos queda, el <code>stdin</code>.</p><p>Igual que con las entradas que llegan desde el proceso hijo, podemos enviar la información usando directamente el OutputStream del proceso, pero lo haremos de nuevo con un Decorator.</p><p>En este caso, el <em>wrapper</em> de mayor nivel nivel para usar un OutputStream es la clase PrintWriter que nos ofrece métodos similares a los de <code>System.out.printxxxxx</code> para gestionar el flujo de comunicación con el proceso hijo.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> toProcess </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">            p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">UTF-8</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">)),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"><span style="color:#90A4AE;">toProcess</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">sent to child</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="heredar-la-e-s-del-proceso-padre" tabindex="-1">Heredar la E/S del proceso padre</h3><p>Con el método <code>inheritIO()</code> podemos redireccionar todos los flujos de E/S del proceso hijo a la E/S estándar del proceso padre.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> processBuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">/bin/sh</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-c</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">echo hello</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">inheritIO</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> exitCode </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> process</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">waitFor</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En el ejemplo anterior, tras invocar al método inheritIO() podemos ver la salida del comando ejecutado en la consola del proceso padre dentro del IDE Netbeans.</p><div class="custom-container warning"><p class="custom-container-title">Úsalo para depurar la comunicación/sincronización padre-hijo</p><p>Este método es útil para depurar, pero no se recomienda para código de producción. Es mejor usar los métodos getInputStream() y getErrorStream() para leer las salidas y errores del subproceso, y el método getOutputStream() para escribir en el subproceso.</p></div>`,12),P=r(`<h2 id="_2-3-2-redireccion-de-las-entradas-y-salidas-estandar" tabindex="-1">2.3.2 Redirección de las Entradas y Salidas Estándar</h2><p>En un sistema real, probablemente necesitemos guardar los resultados de un proceso en un archivo de log o de errores para su posterior análisis. Afortunadamente lo podemos hacer sin modificar el código de nuestras aplicaciones usando los métodos que proporciona el API de ProcessBuilder para hacer exactamente eso.</p><p>Por defecto, tal y como ya hemos visto, los procesos hijos reciben la entrada a través de una tubería a la que podemos acceder usando el OutputStream que nos devuelve <code>Process.getOutputStream()</code>.</p><p>Sin embargo, tal y como veremos a continuación, esa entrada estándar se puede cambiar y redirigirse a otros destinos como un fichero usando el método <code>redirectOutput(File)</code>. Si modificamos la salida estándar, el método getOutputStream() devolverá <em>ProcessBuilder.NullOutputStream</em>.</p><div class="custom-container info"><p class="custom-container-title">Redirección antes de ejecutar</p><p>Es importante fijarse en qué momento se realiza cada acción sobre un proceso.</p><p>Antes hemos visto que los flujos de E/S se consultan y gestionan una vez que el proceso está en ejecución, por lo tanto los métodos que nos dan acceso a esos <em>streams</em> son métodos de la clase <code>Process</code>.</p><p>Si lo que queremos es redirigir la E/S, como vamos a ver a continuación, lo haremos mientras preparamos el proceso para ser ejecutado. De forma que cuando se lance sus streams de E/S se modifiquen. Por eso en esta ocasión los métodos que nos permiten redireccionar la E/S de los procesos son métodos de la clase <code>ProcessBuilder</code>.</p></div><p>Vamos a ver con un ejemplo cómo hacer un programa que muestre la versión de Java. Ahora bien, en esta ocasión la salida se va a guardar en un archivo de log en vez de enviarla al padre por la tubería de salida estándar:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> processBuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-version</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// La salida de error se enviará al mismo sitio que la estándar</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectErrorStream</span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">File</span><span style="color:#90A4AE;"> log </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> folder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">newFile</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java-version.log</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectOutput</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">log</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En el ejemplo anterior podemos observar como se crea un archivo temporal llamado <em>java-version.log</em> e indicamos a ProcessBuilder que la salida la redirija a este archivo.</p><p>Es lo mismo que si llamásemos a nuestra aplicación usando el operador de redirección de salida:</p><blockquote><p>java ejemplo-java-version &gt; java-version.log</p></blockquote><div class="custom-container tip"><p class="custom-container-title">Código del proceso hijo</p><p>Si el proceso hijo que lanzamos, en vez de ser un comando del sistema, es otra clase java, en ningún momento tenemos que modificar el código de este proceso para que funcione como hijo.</p><p>Por lo tanto, el proceso hijo seguirá haciendo</p><blockquote><p>System.out.println(&quot;Versión de Java: &quot; + System.getProperty(&quot;java.version&quot;));</p></blockquote><p>y será el sistema operativo el que se encargue de redirigir las salidas o entradas al fichero, o donde se haya configurado con los métodos de redirección de la clase <code>ProcessBuilder</code>.</p></div><p>Ahora vamos a fijarnos en una variación del ejemplo anterior. Lo que queremos hacer ahora es añadir (<code>append to</code>) información al archivo de log file en vez de sobrescribir el archivo cada vez que se ejecuta el proceso. Con sobrescribir nos referimos a crear el archivo vacío si no existe, o bien borrar el contenido del archivo si éste ya existe.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">File</span><span style="color:#90A4AE;"> log </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> tempFolder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">newFile</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java-version-append.log</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectErrorStream</span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectOutput</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Redirect</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">appendTo</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">log</span><span style="color:#39ADB5;">));</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Otra vez más, es importante hacer notar la llamada a <code>redirectErrorStream(true)</code>. En el caso de que se produzca algún error, se mezclarán con los mensajes de salida en el fichero..</p><p>En el APi de ProcessBuilder encontramos métodos para redireccionar también la salida de error estándar y la entrada estándar de los procesos.</p><ul><li>redirectError(File)</li><li>redirectInput(File)</li></ul><p>Para hacer las redirecciones también podemos utilizar la clase <code>ProcessBuilder.Redirect</code> como parámetro para las versiones sobrecargadas de los métodos anteriores, utilizando uno de los siguientes valores</p><table><thead><tr><th>Valor</th><th>Significado</th></tr></thead><tbody><tr><td>Redirect.DISCARD</td><td>La información se descarta</td></tr><tr><td>Redirect.to(File)</td><td>La información se guardará en el fichero indicado. Si existe, se vacía.</td></tr><tr><td>Redirect.from(File)</td><td>La información se leerá del fichero indicado</td></tr><tr><td>Redirect.appendTo(File)</td><td>La información se añadirá en el fichero indicado. Si existe, no se vacía</td></tr></tbody></table><p>Estos valores son campos estáticos de la clase Redirect y pueden ser usados como parámetros para los métodos sobrecargados redirectOutput, redirectError y redirectInput.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">File</span><span style="color:#90A4AE;"> log </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> folder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">newFile</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">sampleInputData.csv</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectInput</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Redirect</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">from</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">log</span><span style="color:#39ADB5;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function x(C,F){const t=l("DownloadPDF-component"),c=l("DocumentCover-component"),n=l("router-link"),i=l("ExternalLinkIcon");return y(),m("div",null,[a(t),a(c,{titulo:"2.3 Gestión de la E-S de un proceso"}),B,s("nav",b,[s("ul",null,[s("li",null,[a(n,{to:"#_2-3-1-redireccion-de-la-e-s-estandar"},{default:o(()=>[e("2.3.1 Redirección de la E/S estándar")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#getinputstream"},{default:o(()=>[e("getInputStream()")]),_:1})]),s("li",null,[a(n,{to:"#geterrorstream"},{default:o(()=>[e("getErrorStream()")]),_:1})]),s("li",null,[a(n,{to:"#getoutputstream"},{default:o(()=>[e("getOutputStream()")]),_:1})]),s("li",null,[a(n,{to:"#heredar-la-e-s-del-proceso-padre"},{default:o(()=>[e("Heredar la E/S del proceso padre")]),_:1})])])]),s("li",null,[a(n,{to:"#_2-3-2-redireccion-de-las-entradas-y-salidas-estandar"},{default:o(()=>[e("2.3.2 Redirección de las Entradas y Salidas Estándar")]),_:1})])])]),D,p("![alt_text](./../../media/unit2/pipe_with_two.jpg)"),E,s("div",h,[g,f,q,j,s("p",null,[s("a",S,[e("Refactoring.Guru patrones de diseño"),a(i)])])]),_,p(`
### Pipelines

Java 9 introdujo el concepto de \`pipelines\` en el API de ProcessBuilder:

\`\`\`java:no-line-numbers
public static List<Process> startPipeline​(List<ProcessBuilder> builders)
\`\`\`

El método \`startPipeline\` usa un lista de objetos ProcessBuilder. Este método estático se encarga de lanzar un proceso para cada uno de los ProcessBuilder recibidos. Y lo que automatiza es la creación de tuberías encadenadas (pipeline) haciendo que la salida de cada proceso esté enlazada con la entrada del siguiente..

Por ejemplo, si queremos realizar este tipo de operaciones tan comunes en shellscript:

> find . -name *.java -type f | wc -l

Lo que haremos será crear un ProcessBuilder para cada uno de los comandos, y  pasárselos todos al método startPipeline para que los ejecute y los encadene.

\`\`\`java
List builders = Arrays.asList(
    new ProcessBuilder("find", "src", "-name", "*.java", "-type", "f"), 
    new ProcessBuilder("wc", "-l"));

List processes = ProcessBuilder.startPipeline(builders);
Process last = processes.get(processes.size() - 1);

// Desde el proceso padre podemos recoger la salida del último proceso para 
// el resultado final del pipeline
\`\`\`

El ejemplo anterior busca todos los archivos .java  dentro del directorio src, encadena la salida hacia el comando wc para contar cuantos ficheros ha encontrado, siendo este el resultado final del pipeline.
`),P])}const k=u(v,[["render",x],["__file","iostreams.html.vue"]]);export{k as default};
