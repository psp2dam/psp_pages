import{_ as i,a as A,b as d,c as y,d as u,e as v}from"./multithread_server_sequence-89666c43.js";import{_ as m,r as p,o as b,c as E,d as n,a as s,w as o,b as a,f as r}from"./app-92b2a0d8.js";const B={},D=s("h1",{id:"_4-2-sockets-tcp",tabindex:"-1"},"4.2 Sockets TCP",-1),h={class:"table-of-contents"},g=s("h2",{id:"_4-2-1-comunicacion-cliente-servidor-con-sockets-tcp",tabindex:"-1"},"4.2.1. Comunicación cliente/servidor con sockets TCP",-1),f=s("p",null,"Oracle ha resumido el uso de los sockets en un breve tutorial. Todo lo que podemos ver en ese tutorial lo vamos a ir comentando y ampliando en este apartado del tema",-1),S={href:"https://docs.oracle.com/javase/tutorial/networking/sockets/index.html",target:"_blank",rel:"noopener noreferrer"},q=r('<p>La interfaz Java que da soporte a sockets TCP está constituida por las clases <strong>ServerSocket</strong> y <strong>Socket</strong>.</p><ul><li><p>ServerSocket: es utilizada por un servidor para crear un socket en el puerto en el que escucha las peticiones de conexión de los clientes. Su método <code>accept</code> toma una petición de conexión de la cola, o si la cola está vacía, se bloquea hasta que llega una petición.</p><p>El resultado de ejecutar accept es una instancia de Socket, a través del cual el servidor tiene acceso a los datos enviados por el cliente.</p></li><li><p>Socket: es utilizada tanto por el cliente como por el servidor. El cliente crea un socket especificando el nombre DNS del host y el puerto del servidor, así se crea el socket local y además se conecta con el servicio.</p><p>Esta clase proporciona los métodos <code>getInputStream</code> y <code>getOutputStream</code> para acceder a los dos streams asociados a un socket (recordemos que son bidireccionales), y devuelve tipos de datos InputStream y OutputStream, respectivamente, a partir de los cuales podemos construir <code>BufferedReader</code> y <code>PrintWriter</code>, respectivamente, para poder procesar los datos de forma más sencilla.</p></li></ul><h3 id="programacion-de-aplicaciones-cliente-y-o-servidor" tabindex="-1">Programación de aplicaciones Cliente y/o Servidor</h3><p>Al crear aplicaciones cliente y servidor puede que nos encontremos con varios escenarios, a saber:</p><ul><li>Si tenemos que programar solo el servidor <strong>deberemos definir un protocolo</strong> de comunicación para usar ese servidor.</li><li>Si tenemos que programar solo el cliente <strong>necesitaremos conocer el protocolo</strong> de comunicación para conectar con ese servidor.</li><li>Si tenemos que programar el cliente y el servidor, tendremos que empezar por <strong>definir el protocolo</strong> de comunicación entre ambos.</li></ul>',5),k={class:"custom-container info"},C=s("p",{class:"custom-container-title"},"Herramientas para definir los protocolos",-1),_=s("p",null,"Dentro de todos los diagramas que ofrece UML, el diagrama de secuencia es el que mejor se adapta para definir los protocolos de comunicación entre clases y las interacciones que se producen.",-1),x=s("p",null,"Para crear estos diagramas existen multitud de herramientas, tanto de escritorio como online. De todas ellas cabe destacar:",-1),w={href:"https://mermaid.live/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://mermaid-js.github.io/mermaid/#/sequenceDiagram",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.websequencediagrams.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://online.visual-paradigm.com/drive/#diagramlist:proj=0&dashboard",target:"_blank",rel:"noopener noreferrer"},P=s("p",null,"Estas herramientas son las que tenéis que usar en las actividades en las que se os pida definir un protocolo de comunicación cliente / servidor.",-1),F=r(`<h2 id="_4-2-2-cliente-tcp" tabindex="-1">4.2.2. Cliente TCP</h2><p>Si nos centramos en la parte de comunicaciones, la forma general de implementar un cliente será:</p><ol><li>Crear un objeto de la clase Socket, indicando host y puerto donde corre el servicio.</li><li>Obtener las referencias al stream de entrada y al de salida al socket.</li><li>Leer desde y escribir en el stream de acuerdo al protocolo del servicio. Para ello emplear alguna de las facilidades del paquete java.io.</li><li>Cerrar los streams.</li><li>Cerrar el socket.</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">BasicClient</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Creamos un socket en el lado cliente, enlazado con un</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// servidor que está en la misma máquina que el cliente</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// y que escucha en el puerto 4444</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Socket</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">localhost</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">err</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede establecer canales de E/S para la conexión</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Scanner</span><span style="color:#90A4AE;"> stdIn </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Scanner</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">in</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// El programa cliente no analiza los mensajes enviados por el</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// usuario, simplemente los reenvía al servidor hasta que este</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// se despide con &quot;Adios&quot;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Leo la entrada del usuario</span></span>
<span class="line"><span style="color:#90A4AE;">                linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">nextLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// La envia al servidor por el OutputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la respuesta del servidor por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Envía a la salida estándar la respuesta del servidor</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Respuesta servidor: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Si es &quot;Adios&quot; es que finaliza la comunicación</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Adios</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">IOException: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getMessage</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Libera recursos</span></span>
<span class="line"><span style="color:#90A4AE;">        salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),T={class:"custom-container info"},R=s("p",{class:"custom-container-title"},"Herramientas para simular clientes genéricos",-1),L=s("p",null,"Si sólo tenemos que desarrollar un servidor y no tenemos o no queremos hacer un cliente para las pruebas, tenemos varias herramientas que nos ayudan a hacer de clientes genéricos, útiles para una gran variedad de servidores, incluso para servidores estándar como FTP, HTTP, etc.",-1),W=s("p",null,[a("La primera herramienta es una aplicación y un protocolo de nivel de aplicación de TCP/IP, es la herramienta "),s("code",null,"Telnet"),a(".")],-1),z=s("p",null,"Esta herramienta suele venir instalada en los sistemas GNU/Linux y OS X. Sin embargo en los sistemas Windows viene deshabilitada por defecto.",-1),N={href:"https://www.xataka.com/basics/telnet-que-como-activarlo-windows-10",target:"_blank",rel:"noopener noreferrer"},X=s("p",null,"Es importante que lo activéis tanto en clase como en el aula.",-1),U=s("p",null,"La segunda herramienta es NetCat. Es una herramienta muy versátil y potente, ya que no sólo puede hacernos de cliente, sino que también puede servir como servidor.",-1),H=s("p",null,[a("Como muchas otras herramientas, esta también viene instalada de serie en GNU/Linux y OS X, pero no en Windows. Su uso en los sistemas de Microsoft es algo más controvertido ya que el sistema la detecta como un virus y tenemos que habilitar su uso en el "),s("em",null,"Guardian"),a(" del SO.")],-1),M={href:"https://www.ionos.es/digitalguide/servidores/herramientas/netcat/",target:"_blank",rel:"noopener noreferrer"},J=r('<h3 id="streams-para-e-s-en-los-sockets" tabindex="-1">Streams para E/S en los sockets</h3><p>Si vemos ejemplos en Internet o en tutoriales, podemos observar que hay dos formas mayoritarias de enviar y recibir la información a través de los streams que proporciona un socket.</p><p><img src="'+i+'" alt="Basic Stream IO"></p><p>En cualquier caso, a través de los streams enviamos bytes, que es la forma más básica de generar información, bien sea a través de la red o entre procesos.</p><p>Como es complicado gestionar a nivel de bytes toda la información que queremos enviar o recibir, usamos <code>Decorators</code> o <code>Wrappers</code> para enviar tipos de datos de un nivel de abstracción mayor.</p><p>En los temas anteriores, cuando hemos tenido que intercambiar información entre procesos, hemos estado usando BufferedReader y PrintWriter. Estas clases trabajan a nivel de Strings, y son muy útiles cuando lo que queremos intercambiar a través de los streams son cadenas de texto.</p><blockquote><p>En los protocolos de comunicaciones, más del 90% de la información que se intercambia, a nivel de protocolo, es en formato texto.</p></blockquote><p>Sin embargo, puede haber ocasiones en las que nos interese trabajar con tipos de datos.</p><p><code>DataInputStream</code> y <code>DataOutputStream</code> proporcionan métodos para leer y escribir Strings y todos los tipos de datos primitivos de Java, incluyendo números y valores booleanos.</p><p><img src="'+A+`" alt="Basic Stream IO"></p><p>DataOutputStream codifica esos valores de forma independiente de la máquina y los envía al stream de más bajo nivel para que los gestione como bytes. DataInputStream hace lo contrario.</p><p>Así, podemos trabajar con DataInputStream y DataOutputStream a partir de los streams que nos proporcionan los sockets</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Código en el cliente</span></span>
<span class="line"><span style="color:#9C3EDA;">DataInputStream</span><span style="color:#90A4AE;"> dis </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">DataInputStream</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socket</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">dis</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readDouble</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// Código en el servidor</span></span>
<span class="line"><span style="color:#9C3EDA;">DataOutputStream</span><span style="color:#90A4AE;"> dos </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">DataOutputStream</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socket</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">dis</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">writeDouble</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">number</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Los métodos <code>readUTF()</code> and <code>writeUTF()</code> de DataInputStream y DataOutputStream leen y escriben un String de caracteres Unicode usando la codificación UTF-8.</p><div class="custom-container warning"><p class="custom-container-title">Elige un método y usa siempre el mismo</p><p>Es muy importante no mezclar diferentes wrappers en el mismo sistema. Aunque todos acaban utilizando el InputStream y el OutputStream, las codificaciones y la forma de enviar la información no es la misma.</p><p>Por lo que, si usas DataInputStream en el cliente para leer, debes usar DataOutputStream en el servidor para enviar. Además de usar los métodos complementarios para la lectura y escritura, por ejemplo readInt / writeInt.</p></div>`,15),V={href:"https://www.oreilly.com/library/view/learning-java-4th/9781449372477/ch12s01.html",target:"_blank",rel:"noopener noreferrer"},$=r('<div class="pagebreak"></div><h2 id="_4-2-3-servidor-tcp" tabindex="-1">4.2.3 Servidor TCP</h2><p>La forma de implementar un servidor será:</p><p><img src="'+d+`" alt="Estados de un servidor monohilo"></p><ol><li>Crear un objeto de la clase ServerSocket para escuchar peticiones en el puerto asignado al servicio.</li><li>Esperar solicitudes de clientes</li><li>Cuando se produce una solicitud: <ul><li>Aceptar la conexión obteniendo un objeto de la clase Socket</li><li>Obtener las referencias al stream de entrada y al de salida al socket anterior.</li><li>Leer datos del socket, procesarlos y enviar respuestas al cliente, escribiendo en el stream del socket.Para ello emplear alguna de las facilidades del paquete java.io.</li></ul></li><li>Cerrar los streams.</li><li>Cerrar los sockets.</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">BasicServer</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> PORT </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Establece el puerto en el que escucha peticiones</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ServerSocket</span><span style="color:#90A4AE;"> socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ServerSocket</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede escuchar en el puerto: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Escuchando: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Se bloquea hasta que recibe alguna petición de un cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// abriendo un socket para el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">accept</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Conexión aceptada: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hace eco de lo que le proporciona el cliente, hasta que recibe &quot;Adios&quot;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la solicitud del cliente por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> str </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Envía a la salida estándar el mensaje del cliente</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Le envía la respuesta al cliente por el OutputStream                </span></span>
<span class="line"><span style="color:#90A4AE;">                salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Si es &quot;Adios&quot; es que finaliza la comunicación</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Adios</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">IOException: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getMessage</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quedando la secuencia de acciones entre el cliente y el servidor de la siguiente manera</p><p><img src="`+y+`" alt="Estados de un servidor monohilo"></p><p>El servidor monohilo se encarga de realizar las operaciones de E/S con el cliente. Hasta que no acaba no puede hacer otro <code>accept</code> y atender a otro cliente.</p><div class="custom-container warning"><p class="custom-container-title">Local Name Resolver (hosts file)</p><p>Deberías saber que DNS traduce nombre de dominio en direcciones IP. Pero, ¿sabes que hay un archivo en tu sistema que puede sobrescribir esas traducciones?</p><p>Es el archivo <code>hosts</code> y nos permite mapear nombre de dominio a direcciones IP. Tu archivo HOSTS sólo afecta al comportamiento de tu equipo, por lo que podemos usarlo para crear direcciones personalizadas para IP de nuestra red, o bien para redireccionar / bloquear el acceso a determinados sitios web.</p><p>Como puedes imaginar, cambiar de forma incorrecta o <strong>maliciosa</strong> el contenido del archivo hOSTS puede romper fácilmente el comportamiento de tu conexión a Internet, Así que la modificación del archivo no es trivial para los usuarios, algo que es de agradecer.</p><ul><li>Windows</li></ul><p>El archivo HOSTS está almacenado como un fichero de texto plano en la carpeta del sistema de Windows.</p><p>Abre el menú inicio y escribe &quot;notepad&quot;.</p><p>Pulsa con el botón derecho y selecciona la opción de &quot;Ejecutar como administrador&quot;</p><p>En Notepad, ve a Archivo &gt; Abrir y pega la siguiente ruta:</p><p>c:\\Windows\\System32\\Drivers\\etc\\hosts</p><p>Ahora ya puedes editar y guardar los cambios en tu archivo HOSTS.</p><p>Para mapear un dominio, añade una nueva línea siguiendo los ejemplos que hay en el archivo.</p><ul><li>OS X &amp; GNU/Linux</li></ul><p>El archivo está en /etc/hosts y debes editarlo con privilegios de administrador.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;"># Añadimos las siguientes entradas al archivo hosts</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">## En clase </span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">##  - como cliente y servidor ponemos la IP de nuestro equipo.</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">##  - como profesor ponemos la IP del ordenador del profesor</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">## En casa (la dirección probablemente tenga el formato 192.168.X.X)</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">##  - como cliente, servidor y profesor ponemos la IP de nuestro equipo.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># En nuestras actividades, para no tener que ir cambiando las direcciones IP, usaremos </span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># siempre estos nombres de dominio, así los programas funcionarán tanto en clase como</span></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;"># en casa.</span></span>
<span class="line"><span style="color:#E2931D;">10.100.XX.1</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">cliente.psp</span></span>
<span class="line"><span style="color:#E2931D;">10.100.XX.1</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">servidor.psp</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#E2931D;">10.100.0.1</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">profesor.psp</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="pagebreak"></div><h2 id="_4-2-4-servidor-multihilo" tabindex="-1">4.2.4 Servidor multihilo</h2><p>Si queremos que un servidor pueda atender varias peticiones de forma simultanea, debemos usar hilos para dotarle de esa capacidad.</p><p>El flujo básico ahora cambiaría para adaptarse a este formato</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;">while (true) {</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span>
<span class="line"><span style="color:#90A4AE;">    Aceptar la conexión obteniendo un objeto de la clase Socket;</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span>
<span class="line"><span style="color:#90A4AE;">    Crear un thread para que se encargue de la comunicación con ese cliente, es decir, </span></span>
<span class="line"><span style="color:#90A4AE;">    para que gestione el socket obtenido en el accept.;</span></span>
<span class="line"><span style="color:#90A4AE;">}</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="Estados de un servidor multihilo"></p><p>El servidor multihilo crea un nuevo hilo que se encarga de las operaciones de E/S con el cliente. Mientras tanto puede esperar la conexión de nuevos clientes con los que volverá a hacer lo mismo.</p><p>El servidor multihilo se ayuda de una clase <code>Worker</code> que hereda de Thread, pudiendo así ejecutarse concurrentemente con el hilo principal.</p><p>Esta clase <code>Worker</code> es la encargada de realizar toda la comunicación con el cliente y el servidor. Para poder hacerlo, en su constructor recibe el Socket que se crea cuando se recibe la conexión de un cliente <code>ServerSocket.accept()</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> PORT </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Establece el puerto en el que escucha peticiones</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">ServerSocket</span><span style="color:#90A4AE;"> socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ServerSocket</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede escuchar en el puerto: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Escuchando: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Se bloquea hasta que recibe alguna petición de un cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// abriendo un socket para el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">accept</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Conexión aceptada: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Para seguir aceptando peticiones de otros clientes</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// se crea un nuevo hilo que se encargará de la comunicación con el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Worker</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">).</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">...</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Y esta sería una implementación estándar de un worker</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Worker</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Realizamos la comunicación entre servidor y cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// **** ES LO QUE CAMBIA EN CADA EJERCICIO ****</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hacemos una recepción de información desde el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> mensajeRecibido </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&lt;-- Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> mensajeRecibido</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hacemos un envío al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> mensajeEnviado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Mensaje enviado desde el servidor al cliente</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">mensajeEnviado</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">--&gt; Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> mensajeEnviado</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">....</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">        </span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quedando ahora la secuencia de acciones entre el cliente y el servidor de la siguiente manera</p><p><img src="`+v+'" alt="Estados de un servidor monohilo"></p><div class="pagebreak"></div><div class="custom-container info"><p class="custom-container-title">Ejecución de múltiples clientes desde línea de comandos</p><p>Para poder lanzar varias aplicaciones java a la vez, la forma más correcta de hacerlo es desde una terminal de comandos. Esto nos permite poder pasarle argumentos a todas las clases, no sólo a la que está marcada como <em>principal</em> en el proyecto.</p><p>Aquí tenemos dos posibilidades, <strong>ejecutar las clases individualmente</strong>, tal y como hacemos desde el IDE o bien <strong>lanzar las clases desde un archivo JAR</strong>.</p><p>En ambos casos, necesitamos haber compilado y construido el proyecto (<em>F11 ó Shift+F11 en Netbeans</em>).</p><p>Ejecución de clases individuales</p><ul><li><p>Lo primero, tal y como se ha indicado anteriormente, debemos tener las clases compiladas.</p></li><li><p>A continuación, al igual que hacíamos con los procesos, debemos ubicarnos en la carpeta <code>build/classes</code> del proyecto.</p></li><li><p>Desde ahí, ejecutaremos</p><blockquote><p>build/classes$ java psp.actividades.U4AX_ClaseServidor 5566</p></blockquote><p>los valores que ponemos a continuación del nombre de la clase son los parámetros que la clase recibirá en el args[] de su método main.</p><p>y para la clase o clases que no sean las principales</p><blockquote><p>build/classes$ java psp.actividades.U4AX_ClaseSCliente localhost 5566</p></blockquote><p>Si queremos lanzar más de un cliente, repetiremos el comando desde otra ventana de comandos.</p></li></ul><p>Lanzar las clases desde un archivo JAR</p><ul><li><p>Lo primero, tal y como se ha indicado anteriormente, debemos tener el proyecto construido</p></li><li><p>A continuación, y a diferencia del caso anterior, debemos ubicarnos en el directorio donde esté el archivo JAR. Si no lo hemos movido, estará en la carpeta <code>dist</code> del proyecto.</p></li><li><p>Desde ahí, ejecutaremos, <strong>para la clase principal del proyecto</strong></p><blockquote><p>dist$ java -jar U4AX_ProyectoClienteServidor.jar 5566</p></blockquote><blockquote><p>dist$ java -cp U4AX_ProyectoClienteServidor.jar psp.actividades.U4AX_ClaseServidor 5566</p></blockquote><p>los valores que ponemos a continuación del nombre de la clase son los parámetros que la clase recibirá en el args[] de su método main.</p><p>y para la clase o clases que no sean las principales</p><blockquote><p>dist$ java -cp U4AX_ProyectoClienteServidor.jar psp.actividades.U4AX_ClaseCliente localhost 5566</p></blockquote><p>Si queremos lanzar más de un cliente, repetiremos el comando desde otra ventana de comandos.</p></li></ul></div>',26);function G(Q,Y){const t=p("DownloadPDF-component"),c=p("DocumentCover-component"),l=p("router-link"),e=p("ExternalLinkIcon");return b(),E("div",null,[n(t),n(c,{titulo:"4.2 Sockets TCP"}),D,s("nav",h,[s("ul",null,[s("li",null,[n(l,{to:"#_4-2-1-comunicacion-cliente-servidor-con-sockets-tcp"},{default:o(()=>[a("4.2.1. Comunicación cliente/servidor con sockets TCP")]),_:1}),s("ul",null,[s("li",null,[n(l,{to:"#programacion-de-aplicaciones-cliente-y-o-servidor"},{default:o(()=>[a("Programación de aplicaciones Cliente y/o Servidor")]),_:1})])])]),s("li",null,[n(l,{to:"#_4-2-2-cliente-tcp"},{default:o(()=>[a("4.2.2. Cliente TCP")]),_:1}),s("ul",null,[s("li",null,[n(l,{to:"#streams-para-e-s-en-los-sockets"},{default:o(()=>[a("Streams para E/S en los sockets")]),_:1})])])]),s("li",null,[n(l,{to:"#_4-2-3-servidor-tcp"},{default:o(()=>[a("4.2.3 Servidor TCP")]),_:1})]),s("li",null,[n(l,{to:"#_4-2-4-servidor-multihilo"},{default:o(()=>[a("4.2.4 Servidor multihilo")]),_:1})])])]),g,f,s("p",null,[s("a",S,[a("Tutorial de Oracle: All about sockets"),n(e)])]),q,s("div",k,[C,_,x,s("ul",null,[s("li",null,[s("a",w,[a("Mermaid Live editor"),n(e)]),a(" que usa una "),s("a",O,[a("sintaxis en modo texto"),n(e)]),a(" para definir los diagramas.")]),s("li",null,[s("a",j,[a("WebSequenceDiagrams"),n(e)]),a(": Más visual y también con una definición textual de los diagramas.")]),s("li",null,[s("a",I,[a("Visual Paradigm Online"),n(e)]),a(": Herramienta totalmente visual y con unos resultados más espectaculares.")])]),P]),F,s("div",T,[R,L,W,z,s("p",null,[a("Os dejo un enlace al artículo de Xataka "),s("a",N,[a("Telnet: qué es y cómo activarlo en Windows 10"),n(e)]),a(".")]),X,U,H,s("p",null,[a("Os dejo también un enlace a este artículo de IONOS "),s("a",M,[a("¿Qué es Netcat y cómo funciona?"),n(e)])])]),J,s("p",null,[a("Información extraída de "),s("a",V,[a("Learning Java, 4th Edition - O'Reilly"),n(e)])]),$])}const ss=m(B,[["render",G],["__file","sockets-tcp.html.vue"]]);export{ss as default};
