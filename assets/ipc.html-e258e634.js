import{_ as c,r as l,o as t,c as p,d as s,a as e,w as o,b as a,f as u}from"./app-92b2a0d8.js";const m={},y=e("h1",{id:"_2-1-comunicacion-entre-procesos",tabindex:"-1"},"2.1. Comunicación entre procesos",-1),v={class:"table-of-contents"},h=u(`<p>La comunicación entre procesos, IPC (Inter Process Communication), es una de las características principales de los sistemas operativos. En este apartado nos vamos a centrar en la comunicación de procesos que estén en el mismo dispositivo.</p><h2 id="_2-1-1-comunicacion-mediante-e-s" tabindex="-1">2.1.1. Comunicación mediante E/S</h2><p>La comunicación entre procesos se puede realizar de muchas formas, pero una de las más sencillas y comunes es la comunicación mediante la entrada y salida estándar.</p><div class="custom-container info"><p class="custom-container-title">E/S en Java</p><p>En Java, la comunicación mediante la entrada y salida estándar se realiza mediante los flujos de entrada y salida estándar, <code>System.in</code> y <code>System.out</code> respectivamente.</p></div><p>Todo proceso tiene tres flujos de entrada y salida estándar que se pueden usar para la comunicación con otros procesos. Estos flujos son:</p><ul><li><strong>stdin</strong> (entrada estándar): por donde el proceso recibe datos. Por defecto se corresponde con el teclado y el identificador del fichero asociado es 0.</li><li><strong>stdout</strong> (salida estándar): por donde el proceso envía datos. Por defecto se corresponde con la consola y el identificador del fichero asociado es 1.</li><li><strong>stderr</strong> (salida de error estándar): por donde el proceso envía mensajes de error. Por defecto se corresponde con la consola y el identificador del fichero asociado es 2.</li></ul><p>Un mecanismo IPC, relativamente sencillo, es la comunicación de procesos mediante la redirección de las salidas y entradas estándar a/desde otras fuentes.</p><div class="custom-container warning"><p class="custom-container-title">Redirección de E/S</p><p>La redirección de la entrada y salida estándar se puede hacer en la línea de comandos de los sistemas UNIX y Windows. En Java, se puede hacer mediante la clase <code>ProcessBuilder</code> que veremos en la siguiente sección de la unidad</p></div><h3 id="redireccion-de-la-entrada-estandar" tabindex="-1">Redirección de la entrada estándar</h3><p>La redirección de la entrada estándar se puede hacer mediante el operador <code>&lt;</code> en sistemas UNIX y Windows.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">entrada.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En el ejemplo anterior, el programa <code>MiClase</code> recibe la entrada estándar desde el fichero <code>entrada.txt</code> en vez de desde el teclado.</p><blockquote><p>Cuando se redirige la entrada estándar, el programa no tiene que hacer nada especial para leer de un fichero en vez de del teclado. El sistema operativo se encarga de redirigir la entrada estándar del programa al fichero que se le indica.</p></blockquote><h3 id="redireccion-de-la-salida-estandar" tabindex="-1">Redirección de la salida estándar</h3><p>La redirección de la salida estándar se puede hacer mediante los operadores <code>&gt;</code> y <code>&gt;&gt;</code> en sistemas UNIX y Windows.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;">  </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">salida.txt</span></span>
<span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;">  </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&gt;&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">salida2.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>En el ejemplo anterior, la salida estándar del programa <code>MiClase</code> se redirige al fichero <code>salida.txt</code> en vez de a la consola. Si el fichero <code>salida.txt</code> no existe, lo crea, y si el fichero ya existe, sobrescribe su valor.</p><p>Si el operador es <code>&gt;&gt;</code>, la salida se añade al final del fichero en vez de sobrescribirlo.</p><blockquote><p>Cuando se redirige la salida estándar, el programa no tiene que hacer nada especial para escribir en un fichero en vez de en la consola. El sistema operativo se encarga de redirigir la salida estándar del programa al fichero que se le indica.</p></blockquote><h3 id="redireccion-de-la-salida-de-error-estandar" tabindex="-1">Redirección de la salida de error estándar</h3><p>La redirección de la salida de error estándar se puede hacer mediante el operador <code>2&gt;</code> en sistemas UNIX y Windows.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">2&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">error.txt</span></span>
<span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">2&gt;&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">error2.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>En el ejemplo anterior, la salida de error estándar del programa <code>MiClase</code> se redirige al fichero <code>error.txt</code> en vez de a la consola.</p><p>Si el operador es <code>2&gt;&gt;</code>, la salida de error se añade al final del fichero en vez de sobrescribirlo.</p><blockquote><p>Cuando se redirige la salida de error, el programa no tiene que hacer nada especial para escribir en un fichero en vez de en la consola. El sistema operativo se encarga de redirigir la salida de error del programa al fichero que se le indica.</p></blockquote><h2 id="_2-1-2-redireccion-de-la-salida-de-un-proceso-a-la-entrada-de-otro-proceso" tabindex="-1">2.1.2. Redirección de la salida de un proceso a la entrada de otro proceso</h2><p>La redirección de la salida estándar a la entrada estándar de otro proceso se puede hacer mediante el operador <code>|</code> en sistemas UNIX y Windows.</p><p>Las tuberías (pipes) permiten conectar la salida estándar de un proceso con la entrada estándar de otro, estableciendo así una relación de productor-consumidor. El uso de tuberías sigue la siguiente sintaxis:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">|</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">java</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">MiClase2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En el ejemplo anterior, la salida estándar del programa <code>MiClase</code> se redirige a la entrada estándar del programa <code>MiClase2</code>.</p><blockquote><p>Cuando se redirige la salida estándar de un proceso a la entrada estándar de otro, el sistema operativo se encarga de conectar los flujos de salida y entrada de los procesos.</p></blockquote><h2 id="_2-1-3-comunicacion-mediante-senales" tabindex="-1">2.1.3. Comunicación mediante señales</h2><p>Las señales son una forma de comunicación entre procesos que se basa en la interrupción de la ejecución de un proceso para que realice una acción determinada.</p><p>Las señales son eventos asíncronos que se envían a un proceso para notificarle de un evento. Las señales pueden ser enviadas por el propio proceso, por otro proceso o por el sistema operativo.</p><p>Las señales se pueden enviar a un proceso mediante la línea de comandos o mediante un programa. En sistemas UNIX, se pueden enviar señales a un proceso mediante el comando <code>kill</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">kill</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">-s</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">SIGUSR1</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1234</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En el ejemplo anterior, se envía la señal <code>SIGUSR1</code> al proceso con PID <code>1234</code>.</p><p>Las señales en el shell de Windows se pueden enviar mediante el comando <code>taskkill</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#E2931D;">$&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">taskkill</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">/pid</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1234</span><span style="color:#90A4AE;"> </span><span style="color:#91B859;">/f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>En el ejemplo anterior, se envía la señal de finalización forzada al proceso con PID <code>1234</code>.</p>`,40),A={class:"custom-container tip"},g=e("p",{class:"custom-container-title"},"Señales",-1),b={href:"https://en.wikipedia.org/wiki/Signal_(IPC)",target:"_blank",rel:"noopener noreferrer"},E={href:"https://openwebinars.net/blog/gestion-de-procesos-y-servicios-desde-shell-script-en-windows/",target:"_blank",rel:"noopener noreferrer"},_=e("h2",{id:"_2-1-4-comunicacion-mediante-sockets",tabindex:"-1"},"2.1.4. Comunicación mediante sockets",-1),f=e("p",null,"Los sockets se pueden usar para la comunicación entre procesos en el mismo dispositivo o en dispositivos diferentes.",-1),k=e("p",null,"Los sockets los estudiaremos en la Unidad 4, donde veremos cómo se pueden usar para la comunicación entre procesos en dispositivos diferentes.",-1);function x(B,C){const i=l("DownloadPDF-component"),d=l("DocumentCover-component"),n=l("router-link"),r=l("ExternalLinkIcon");return t(),p("div",null,[s(i),s(d,{titulo:"2.1. Comunicación entre procesos"}),y,e("nav",v,[e("ul",null,[e("li",null,[s(n,{to:"#_2-1-1-comunicacion-mediante-e-s"},{default:o(()=>[a("2.1.1. Comunicación mediante E/S")]),_:1}),e("ul",null,[e("li",null,[s(n,{to:"#redireccion-de-la-entrada-estandar"},{default:o(()=>[a("Redirección de la entrada estándar")]),_:1})]),e("li",null,[s(n,{to:"#redireccion-de-la-salida-estandar"},{default:o(()=>[a("Redirección de la salida estándar")]),_:1})]),e("li",null,[s(n,{to:"#redireccion-de-la-salida-de-error-estandar"},{default:o(()=>[a("Redirección de la salida de error estándar")]),_:1})])])]),e("li",null,[s(n,{to:"#_2-1-2-redireccion-de-la-salida-de-un-proceso-a-la-entrada-de-otro-proceso"},{default:o(()=>[a("2.1.2. Redirección de la salida de un proceso a la entrada de otro proceso")]),_:1})]),e("li",null,[s(n,{to:"#_2-1-3-comunicacion-mediante-senales"},{default:o(()=>[a("2.1.3. Comunicación mediante señales")]),_:1})]),e("li",null,[s(n,{to:"#_2-1-4-comunicacion-mediante-sockets"},{default:o(()=>[a("2.1.4. Comunicación mediante sockets")]),_:1})])])]),h,e("div",A,[g,e("p",null,[a("Os dejo un enlace a la "),e("a",b,[a("lista de señales de UNIX"),s(r)]),a(".")]),e("p",null,[a("Y un artículo de ampliación sobre "),e("a",E,[a("Gestión de procesos en Windows"),s(r)]),a(".")])]),_,f,k])}const F=c(m,[["render",x],["__file","ipc.html.vue"]]);export{F as default};
